#!/usr/bin/env python

print "importing"
import rospy
import std_msgs
from plastic_picker import main
import numpy as np
import tf
import tf2_ros
import tf2_geometry_msgs
import sensor_msgs
from tf2_sensor_msgs.tf2_sensor_msgs import do_transform_cloud
from geometry_msgs.msg import Pose, PoseStamped, PoseArray
from std_msgs.msg import Float64
from std_msgs.msg import Int32
from std_msgs.msg import String
from geometry_msgs.msg import Point
import pcl
from pcl_helper import *
import sensor_msgs.point_cloud2 as pc2
from sensor_msgs.msg import PointCloud2
from visualization_msgs.msg import Marker
import time
import math

process = False
new_msg = False

print "import complete"

def outlier(cloud, neighbors = 50, threshold = 1.0):
    outlier_filter = cloud.make_statistical_outlier_filter()
    outlier_filter.set_mean_k(neighbors)
    outlier_filter.set_std_dev_mul_thresh(threshold)
    cloud_filtered = outlier_filter.filter()
    
    return outlier_filter.filter()
    
def passthroughbox(cloud, rx, ry, rz, minx, miny, minz, maxx, maxy, maxz):
    box = cloud.make_cropbox()
    
    cloud_out = pcl.PointCloud()
    box.set_Rotation(rx, ry, rz)
    box.set_Translation(0,0,0)
    box.set_MinMax(minx, miny, minz, maxx, maxy, maxz)
    
    box.Filtering(cloud_out)
    
    return cloud_out
    
def passthrough(pcl, axis, ax_min, ax_max):
    pfilter = pcl.make_passthrough_filter()
    pfilter.set_filter_field_name(axis)
    pfilter.set_filter_limits(ax_min, ax_max)
    
    return pfilter.filter()
    
def ransac(cloud, max_dist):
    seg_filter = cloud.make_segmenter()
    seg_filter.set_model_type(pcl.SACMODEL_PLANE)
    seg_filter.set_method_type(pcl.SAC_RANSAC)
    seg_filter.set_distance_threshold(max_dist)
    
    inlay, coeff = seg_filter.segment()
    inliers = cloud.extract(inlay, negative=False)
    outliers = cloud.extract(inlay, negative=True)
    
    return inliers, outliers
    
def posequat(x, y, z, w):
    new_pose = Pose()
    new_pose.orientation.z = z
    new_pose.orientation.y = y
    new_pose.orientation.x = x
    new_pose.orientation.w = w
    return new_pose
    
def new_pose(x, y, z):
    new_pose = PoseStamped()
    new_pose.header.frame_id = "kinect2_ir_optical_frame"
    new_pose.pose.position.z = z
    new_pose.pose.position.y = y
    new_pose.pose.position.x = x
    return new_pose
    
def pcl_newmsg(pcl_msg):
    global process, new_msg, pcl_newest
    if not process:
        new_msg = True
        pcl_newest = pcl_msg

def segmentation():
    global process, new_msg, pcl_newest
    # ROS node initialization
    rospy.init_node('analysis', anonymous=True)
    
    tbuff = tf2_ros.Buffer()
    tlis = tf2_ros.TransformListener(tbuff)
    try:
        kinect_transform = tbuff.lookup_transform("base_link", "kinect2_ir_optical_frame", rospy.Time(0), rospy.Duration(1.0))
    except tf2.LookupException as ex:
        print "tf2 exception"

    goal_red = posequat(.847, .246, .5, 0)
    goal_blue = posequat(-.73, .313, .5, 180)
    goal_reject = posequat(.5, .8, .8, 69)
    
         

    # Create Subscribers
    pcl_sub = rospy.Subscriber("/output", pc2.PointCloud2, pcl_newmsg, queue_size=1, buff_size=2**23)

    # Create Publishers
    pcl_clusters_pub = rospy.Publisher("/clusters", PointCloud2, queue_size=1)
    pcl_clustergoal_pub = rospy.Publisher("/cluster", PointCloud2, queue_size=1)
    pcl_box_pub = rospy.Publisher("/pcl_box", PointCloud2, queue_size=1)
    pcl_floor_pub = rospy.Publisher("/pcl_floor", PointCloud2, queue_size=1)
    pcl_filtered_pub = rospy.Publisher("/filtered", PointCloud2, queue_size=1)
    object_markers_pub = rospy.Publisher("/object_markers", Marker, queue_size=1)
    
    goals_pub = rospy.Publisher("/goal_list", PoseArray, queue_size=1)
    goal_pub = rospy.Publisher("/goal_single", PoseStamped, queue_size=1)

    # Initialize color_list
    get_color_list.color_list = []
    
    confidence = 0

    # Spin while node is not shutdown
    while not rospy.is_shutdown():
        
        if new_msg:
            new_msg = False
            process = True
            
            
            
            start = time.time()
            print "Point Cloud Recieved. Analyzing..."
            
            cloud = ros_to_pcl(pcl_newest)
            end = time.time()
            print "%.2f s for data conversion" %(end - start)
            
            # Voxel Grid Downsampling
            vox = cloud.make_voxel_grid_filter()
            vox_size = .013
            vox.set_leaf_size(vox_size, vox_size, vox_size)
            
            voxd = vox.filter()
            
            
            end = time.time()
            print "%.2f s for vox" %(end - start)
            
            
            # Statistical Outlier Filtering
            # Currently broken
            neighbors = 5 
            threshold = .1
            #outliers = outlier(voxd, neighbors, threshold)
            
            #passthrough old
#            cloud_pass1 = passthrough(voxd, 'z', .92, 1.25)
#            cloud_pass2 = passthrough(cloud_pass1, 'y', -.25, .29)
#            pcl_box = passthrough(cloud_pass2, 'x', -.70, .65)
            
            #passthrough
            cloud_pass1 = passthrough(voxd, 'z', .92, 1.3)
            cloud_pass2 = passthrough(cloud_pass1, 'y', -.35, .08)
            pcl_box = passthrough(cloud_pass2, 'x', -.53, .42)
            
            end = time.time()
            print "%.2f s for box" %(end - start)
              
            #RANSAC
            pcl_floor, cloud_objects = ransac(pcl_box, .012)
            
            #Cluster
            white_cloud = XYZRGB_to_XYZ(cloud_objects)
            tree = white_cloud.make_kdtree()
            ec = white_cloud.make_EuclideanClusterExtraction()
            ec.set_ClusterTolerance(.02)
            ec.set_MinClusterSize(20)
            ec.set_MaxClusterSize(3000)
            
            ec.set_SearchMethod(tree)
            cluster_indices = ec.Extract()
            
            end = time.time()
            print "%.2f s for clustering" %(end - start)
            
            print "%s Objects observed" %(len(cluster_indices))
            
            # Create Individual Cluster Clouds
            cluster_color = get_color_list(len(cluster_indices))

            color_cluster_point_list = []
            centroids = []
            goal_poses = PoseArray()
            goal_poses.header.frame_id = "base_link"
            goal_poses.header.stamp = rospy.Time.now()
                                
            marker = Marker()
            marker.header.frame_id = "kinect2_ir_optical_frame"
            marker.type = marker.POINTS
            marker.scale.x = .05
            marker.scale.y = .05
            marker.scale.z = .05
            marker.color.a = 1
            marker.color.r = 1
            marker.color.g = .1
            marker.color.b = .1
            
            goal_tf_highest = PoseStamped()
            goal_tf_highest.header.frame_id = "base_link"
            goal_tf_highest.pose.position.z = .14
            
            center_biggest = PoseStamped()
            center_biggest.header.frame_id = "kinect2_ir_optical_frame"
            
            biggest_cloud = 0 
            biggest_cloud_ind = 0
              

            #Iterate through each cluster
            for j, indices in enumerate(cluster_indices):
                
                #Average points for faux centroid
                center = Pose()
                xs = [white_cloud[k][0] for k in indices]
                ys = [white_cloud[k][1] for k in indices]
                zs = [white_cloud[k][2] for k in indices]  
                center.position.x = np.mean(xs)
                center.position.y = np.mean(ys)
                center.position.z = np.min(zs)

                marker.action = marker.ADD
                marker.points.append(center.position)
                
                centroids.append(center)
                
                goal = new_pose(center.position.x,
                                center.position.y, 
                                center.position.z)
                
                goal_tf = tf2_geometry_msgs.do_transform_pose(goal, kinect_transform)

                if len(indices) > biggest_cloud:
                    biggest_cloud = len(indices)
                    center_biggest.pose = center
                    biggest_cloud_ind = j
                    print "biggest cloud index: %i" %(biggest_cloud_ind)
                    
                        
                
#                print goal_tf.pose.position
#                goal_tf.pose.orientation = goal_reject.orientation
#                goal_tf = tf2_geometry_msgs.do_transform_pose(goal, kinect_transform)
                
                goal_poses.poses.append(goal_tf.pose)
                
                if goal_tf.pose.position.z > goal_tf_highest.pose.position.z:
                    goal_tf_highest = goal_tf
                
                
                
                #Make segmented point clound
                for i, indice in enumerate(indices):
                    x = white_cloud[indice][0]
                    y = white_cloud[indice][1]
                    z = white_cloud[indice][2]
                    color_cluster_point_list.append([x, y, z, rgb_to_float(cluster_color[j])])
            
            end = time.time()
            print "%.2f s for centroid analysis" %(end - start)        
           
#            print goal_tf.pose.position
#            print "(x:%.1f y:%.1f z:%.1f)" % ((goal_tf.pose.position.x)*100, (goal_tf.pose.position.y)*100, (goal_tf.pose.position.z)*100)
                
#            Create new cloud containing all clusters, each with unique color
            cloud_clusters = pcl.PointCloud_PointXYZRGB()
            cloud_clusters.from_list(color_cluster_point_list)
            
            
            
            #Convert and publish clouds
            object_markers_pub.publish(marker)   
            
            #PCLs to ROS msg
            ros_clust = pcl_to_ros(cloud_clusters)
            ros_filtered = pcl_to_ros(cloud_objects)          
            ros_box = pcl_to_ros(pcl_box)
            
            #Transform to correct frame
            ros_clust_tf = do_transform_cloud(ros_clust, kinect_transform)
            ros_filtered_tf = do_transform_cloud(ros_filtered, kinect_transform)
            ros_box_tf = do_transform_cloud(ros_box, kinect_transform)

            #Publish messages
            pcl_box_pub.publish(ros_box_tf) 
            pcl_filtered_pub.publish(ros_filtered_tf)
            pcl_clusters_pub.publish(ros_clust_tf)
#            raw_input("Press Enter to continue...")
           
            
            goal_tf_highest.pose.orientation.w =  0.0 
            goal_tf_highest.pose.orientation.x =  1.0
            goal_tf_highest.pose.orientation.y =  0.0
            goal_tf_highest.pose.orientation.z = 0.0
            
#            goal_pub.publish(goal_tf_highest)
            goals_pub.publish(goal_poses)
            
            end = time.time()
            print (end - start)
            
            if confidence == 0:
                reference_pose = PoseStamped()
                reference_pose = center_biggest
                
            distance = math.sqrt((reference_pose.pose.position.x-center_biggest.pose.position.x)**2+(reference_pose.pose.position.y-center_biggest.pose.position.y)**2+(reference_pose.pose.position.z-center_biggest.pose.position.z)**2)
            
            print "distance = %.3f" %(distance)
            
            if distance < .01:
                
                confidence += 1
                print "Largest cloud appears to be stationary (confidence: %i)" %(confidence)
                    
                if (confidence > 5):
                    print "Confident in pick point"
                    center_tf = tf2_geometry_msgs.do_transform_pose(center_biggest, kinect_transform)
                    center_tf.pose.orientation.w =  0.0 
                    center_tf.pose.orientation.x =  1.0
                    center_tf.pose.orientation.y =  0.0
                    center_tf.pose.orientation.z = 0.0
                    goal_pub.publish(center_tf)
                    confidence = 0
                    
                    #analyze cluster and identify
                    print "BCI: %i" %biggest_cloud_ind
                    print len(cluster_indices)
                    if len(cluster_indices) > 0:
                        confident_cluster = cloud_objects.extract(cluster_indices[biggest_cloud_ind])
                        ros_cluster = pcl_to_ros(confident_cluster)

            
                        ros_goal_tf = do_transform_cloud(ros_cluster, kinect_transform)

                        pcl_clustergoal_pub.publish(ros_goal_tf)

                    
                        
            else:
                print "reset confidence"
                confidence = 0
            
            process = False        

        
if __name__ == '__main__':
    segmentation()
